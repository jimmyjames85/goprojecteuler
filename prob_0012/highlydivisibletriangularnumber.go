package main

import (
	"fmt"

	"github.com/jimmyjames85/goprojecteuler/util"
	"sort"
)

// https://projecteuler.net/problem=12
//
// Highly divisible triangular number
// ----------------------------------
//
// The sequence of triangle numbers is generated by adding the natural numbers.
// So the7 th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
// >
// >  1 : 1
// >  3 : 1,3
// >  6 : 1,2,3,6
// > 10 : 1,2,5,10
// > 15 : 1,3,5,15
// > 21 : 1,3,7,21
// > 28 : 1,2,4,7,14,28
//
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?

func main() {

	found := false

	for i := uint(10000); !found; i++ {
		tri := triangleNum(i)
		primes := primeFactors(tri)
		if len(primes) > 25 {
			fmt.Printf("%02d: %d    %v\n", i, tri, primeFactors(tri))
			found = true
		}
	}
}

func triangleNum(n uint) uint {
	return n * (n + 1) / 2
}

func primeFactors(n uint) []uint {
	ret := make([]uint, 0)
	if n == 0 {
		return append(ret, 0)
	}
	ret = append(ret, 1) // 1 divide all the things

	ch := make(chan uint)
	go util.GeneratePrimes(ch)
	for p := <-ch; n > 1; p = <-ch {
		for n%p == 0 {
			ret = append(ret, p)
			n = n / p
		}
	}
	return ret
}

func uniqFactors(primeFactors []uint) []uint {

	set := make(map[uint]struct{})
	for _, i := range primeFactors {
		set[i] = struct{}{}
	}

	var ret []uint
	for i := range set {
		ret = append(ret, i)
	}
	//
	//pset := 2 2 3 5
	//
	//dset = 2 3 5 4 6 10 6 10 15 15
	//

	return ret
}
